@using System.Security.Claims
@using System.Threading
@using Microsoft.Extensions.Configuration;
@using System.Net;
@using AutoMapper;
@using DoAnTotNghiep.Config;

@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject NotificationService Notice
@inject IMapper Mapper
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotificationService Notice
<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <div class="main">
        <div class="menu">
            <div>
                @if (NavigationManager.Uri.StartsWith(NavigationManager.BaseUri + "he-thong"))
                {
                    // <SystemMenu></SystemMenu>
                }
                else if (NavigationManager.Uri.StartsWith(NavigationManager.BaseUri + "ca-nhan"))
                {
                    <StaffMenu></StaffMenu>
                }
                else if (NavigationManager.Uri.StartsWith(NavigationManager.BaseUri + "cham-cong"))
                {
                    <TimekeepingMenu></TimekeepingMenu>
                }
                else if (NavigationManager.Uri.StartsWith(NavigationManager.BaseUri + "luong"))
                {
                    //<SalaryMenu></SalaryMenu>
                }
                else if (NavigationManager.Uri.StartsWith(NavigationManager.BaseUri + "thong-tin-nhan-su"))
                {
                    <StaffInfoMenu></StaffInfoMenu>
                }
            </div>
            <div>
                <AuthorizeView>
                    <Authorized>
                        <a href="/" @onclick="(() => Logout())">Logout</a>
                    </Authorized>
                    <NotAuthorized>
                        <a href="/">Login</a>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        </div>
        <div class="content px-4">
            @Body
        </div>
    </div>
</div>
@code
{

    protected async override Task OnInitializedAsync()
    {
        try
        {
            var authenticationState = await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).GetAuthenticationStateAsync();
            if (authenticationState.User.Identity.IsAuthenticated)
            {

            }
            else
            {
                NavigationManager.NavigateTo("/");
            }

        }
        catch (Exception ex)
        {
            await Notice.Open(new NotificationConfig()
            {
                Message = "Thông báo",
                Description = ex.Message
            });
        }
    }
    public void Logout()
    {
        ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsLoggedOut();
    }

    //public string GetLayoutStyle()
    //{
    //    return $"background-image: url('{Background}');";
    //}

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        WindowSizeChanged(await Service.GetDimensions());
    //        browserServiceRef = DotNetObjectReference.Create<BrowserService>(Service);
    //        await Service.BindBrowserDimensionChange(browserServiceRef);
    //    }
    //}

    //async Task LoadUserInfoAsync(string userName)
    //{
    //    sessionData.User = await UserService.GetByUserNameAsync(new AppUserSearch { UserName = userName });
    //    if (sessionData.User == null || !sessionData.User.IsActive || sessionData.User.CompanyId.IsNullOrEmpty())
    //    {
    //        NavigationManager.NavigateTo(uri);
    //    }
    //    else
    //    {
    //        Error.SessionData = sessionData;
    //        sessionData.CompanyInfo = await CompanyInfoService.GetAsync(sessionData.User.CompanyId);
    //        var staffResult = await StaffProfileService.GetStaffByUserNameAsync(new SearchStaffCondition()
    //        {
    //            CompanyId = sessionData.User.CompanyId,
    //            UserName = sessionData.User.UserName
    //        });
    //        if (staffResult.Data?.Id.IsNotNullOrEmpty() == true)
    //        {
    //            sessionData.StaffProfile = staffResult.Data;
    //        }
    //    }
    //}

    //void OpenChangePasswordForm()
    //{
    //    changePasswordModel = new() { UserName = sessionData.User.UserName, Id = sessionData.User.Id };
    //    changePasswordVisible = true;
    //}

    //async Task OnPasswordChangedAsync(ChangePasswordModel model)
    //{
    //    changePasswordVisible = false;
    //    try
    //    {
    //        var result = await UserService.ChangePasswordAsync(model.Id, model.OldPassword, model.Password);
    //        if (result.State)
    //        {
    //            CloseChangePassword();
    //            Notice.NotiSuccess(AlertResource.ChangePasswordSuccessful);
    //        }
    //        else
    //        {
    //            Notice.NotiError(AlertResource.ChangePasswordFailed);
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        Error.ProcessError(ex);
    //    }


    //}

    //void CloseChangePassword()
    //{
    //    changePasswordVisible = false;
    //}

    //async Task OpenDetailAsync()
    //{
    //    try
    //    {
    //        await appUserDetail.LoadEditModelAsync(sessionData.User);
    //        appUserDetail.DisableField();
    //        DetailVisible = true;
    //    }
    //    catch (Exception ex)
    //    {
    //        Error.ProcessError(ex);
    //    }
    //}

    //async Task SaveDetailAsync(AppUserEditModel model)
    //{
    //    try
    //    {
    //        if (model.Id.IsNullOrEmpty())
    //        {
    //            Notice.NotiWarning("Dữ liệu không hợp lệ");
    //            return;
    //        }
    //        var updateModel = Mapper.Map<AppUserData>(model);
    //        var result = await UserService.UpdateAsync(updateModel);
    //        if (result.State)
    //        {
    //            CloseDetail();
    //            Notice.NotiSuccess(AlertResource.UpdateSuccessful);
    //            await LoadUserInfoAsync(model.UserName);
    //        }
    //        else
    //        {
    //            Notice.NotiError(AlertResource.InvalidData);
    //        }

    //    }
    //    catch (Exception ex)
    //    {
    //        Error.ProcessError(ex);
    //    }
    //}

    //void CloseDetail()
    //{
    //    try
    //    {
    //        DetailVisible = false;
    //    }
    //    catch (Exception ex)
    //    {
    //        Error.ProcessError(ex);
    //    }
    //}

    //async Task OpenNewTab(MouseEventArgs e, string url = "")
    //{
    //    if (e.Button == 2)
    //    {
    //        await JSRuntime.InvokeVoidAsync("open", CancellationToken.None, url, "_blank");
    //    }
    //}

    //void WindowSizeChanged(BrowserDimension dimension)
    //{
    //    sessionData.BrowserDimension = dimension;
    //    StateHasChanged();
    //}

    //async Task OpenICareAsync()
    //{
    //    try
    //    {

    //        var request = new RestRequest("/api/User/get-token").AddJsonBody(new { UserName = sessionData.User.UserName, Password = sessionData.User.UserName });
    //        request.Method = Method.Post;
    //        request.Timeout = 15;
    //        request.AddHeader("ApiKey", Configuration[GlobalVariants.HrmApiKey]);
    //        var data = await RestClient.ExecuteAsync<ExcuteResult<string>>(request);
    //        if (data.Data?.Code == ResultCode.SuccessResult)
    //        {
    //            icareInited = true;
    //            tokenAuth = data.Data.Result?.ToString();
    //            string url = string.Format(Configuration[GlobalVariants.ICareUrl], tokenAuth);
    //            await JSRuntime.InvokeVoidAsync("open", CancellationToken.None, url, "_blank");
    //        }
    //        else
    //        {
    //            Notice.NotiError("Tài khoản chưa được cấu hình sử dụng dịch vụ ICare");
    //            return;
    //        }

    //    }
    //    catch (Exception)
    //    {
    //    }
    //}

}
